{"version":3,"sources":["Components/Header.js","Components/ProductList.js","Components/CartBtn.js","Components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","ProductList","props","products","map","item","key","product","price","toFixed","onClick","onAddProduct","value","concat","CartBtn","onOpen","numberOfOrders","length","Cart","addTotal","orders","parseInt","sum","i","console","log","style","right","position","onClose","deleteItem","App","state","cartPosition","cartProducts","handleClose","_this","setState","handleOpen","handleAddProduct","e","splitArray","target","split","order","Date","now","newArray","Object","toConsumableArray","filterItems","filter","this","Components_CartBtn","Components_Cart","Components_Header","Components_ProductList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35722268.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <div className=\"header-container\"></div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\n\nconst ProductList = (props) => {\n    return (\n        <div>\n            <h1>Products</h1>\n            <div className=\"product-container\">\n            {props.products.map(item => {\n                return (\n                    <div key={item.key} >\n                        <h3>{item.product}</h3> \n                        <p>{item.price.toFixed(2)}</p>\n                        <button \n                        onClick={props.onAddProduct} \n                        value={`${item.product } ${item.price}`}\n                        >Buy</button>\n                        </div>\n                )\n            })}\n            </div>\n        </div>\n    )\n}\n\nexport default ProductList;","import React from 'react';\n\nconst CartBtn = (props) => {\n    return  (\n        <div className=\"cartbtn-container\">\n            <p onClick={props.onOpen}>Cart {props.numberOfOrders.length}</p>\n        </div>\n    )\n}\n\nexport default CartBtn;","import React from 'react';\n\nconst Cart = (props) => {\n    let addTotal = props.orders.map(item => parseInt(item.price));\n    let sum = 0;\n    for(let i = 0; i < addTotal.length; i++) {\n        sum += addTotal[i]\n    }\n\n    \n\n    console.log(sum)\n    return (\n        <div className=\"cart-container\" style={{right: `${props.position}px`}}>\n            <div onClick={props.onClose} className=\"close\"></div>\n            <div className=\"orders\"></div>\n            <p className=\"total\">Total: ${sum}</p>\n\n            <div className=\"order-container\">\n                {props.orders.map(item => {\n                    return (<div key={item.key} className=\"order\">\n                        <div className=\"product\">\n                        <h4>{item.product}</h4>\n                        </div>\n                        <div className=\"price-container\">\n                        <p className=\"delete\" onClick={() => props.deleteItem(item.key)}>Delete</p>\n                        <p className=\"price\">{item.price}</p>\n                        </div>\n                    </div>)\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default Cart;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from \"./Components/Header\"\nimport ProductList from \"./Components/ProductList\"\nimport CartBtn from \"./Components/CartBtn\"\nimport Cart from \"./Components/Cart\"\n\nclass App extends Component {\n  state = {\n    cartPosition: -500,\n    products: [\n      {product: 'Shoes', price: 9.00, key: 1},\n      {product: 'Pants', price: 45.00, key: 2},\n      {product: 'Shirt', price: 25.00, key: 3},\n      {product: 'Hat', price: 45.00, key: 4},\n      {product: 'Socks', price: 13.00, key: 5},\n      {product: 'Boxers', price: 25.00, key: 6}\n    ],\n    cartProducts: [],\n  }\n\n  // hiding the cart panel or closing it\n  handleClose = () => {\n    return this.setState({\n      cartPosition: -500\n    })\n  }\n\n// opening cart panel\n  handleOpen = () => {\n    return this.setState({\n      cartPosition: 0,\n    })\n  }\n\n// Add product to cart\nhandleAddProduct = (e) => {\nconst value = e.target.value\nconst splitArray = value.split(' ');\nconst order = {\n  product: splitArray[0],\n  price: parseInt(splitArray[1]).toFixed(2),\n  key: Date.now()\n}\n  \n  const newArray = [...this.state.cartProducts, order]\n\n  this.setState({\n    cartProducts: newArray\n  })\n}\n\ndeleteItem = (key) => {\n  const filterItems = this.state.cartProducts.filter(item => {\n    return item.key !== key;\n  })\n\n  this.setState({\n    cartProducts: filterItems,\n  })\n}\n  \n  render () {\n    console.log(this.state.cartProducts)\n    return (\n      <div className=\"App\">\n      <CartBtn onOpen={this.handleOpen} numberOfOrders={this.state.cartProducts}/>\n      <Cart \n      position={this.state.cartPosition} \n      onClose={this.handleClose} \n      orders={this.state.cartProducts}\n      deleteItem={this.deleteItem}/>\n      <Header />\n      <ProductList onAddProduct={this.handleAddProduct} products={this.state.products}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}